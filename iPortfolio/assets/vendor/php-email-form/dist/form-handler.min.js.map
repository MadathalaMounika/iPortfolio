{"version":3,"sources":["form-handler.js"],"names":["document","addEventListener","php_email_form_submit","thisForm","action","formData","fetch","method","headers","X-Requested-With","then","response","ok","json","Error","concat","status","statusText","url","data","querySelector","remove","success","error","classList","add","displayError","innerHTML","message","querySelectorAll","forms","forEach","event","this","recaptcha","getAttribute","FormData","grecaptcha","ready","execute","token","set"],"mappings":"aAAAA,SAASC,iBAAiB,mBAAoB,WA8C1C,SAASC,EAAsBC,EAAUC,EAAQC,GAC7CC,MAAMF,EAAQ,CACJG,OADI,OAEJF,KAAAA,EACNG,QAAS,CAAAC,mBAAA,oBAAAC,KAAA,SAAAC,GAEH,GAAAA,EAAAA,GACWC,OAAID,EAAAE,OAEV,MAAA,IAAAC,MAAA,GAAAC,OAAAJ,EAAAK,OAAA,KAAAD,OAAAJ,EAAAM,WAAA,KAAAF,OAAAJ,EAAAO,QAILR,KAAA,SAAAS,GAEF,GADSC,EAAAA,cAAT,YAA6CC,UAAOA,OAApD,YACIF,EAAKG,QAGF,MAAA,IAAAR,MAAAK,EAAAI,MAAAJ,EAAAI,MAAA,8DAAAnB,GAHEkB,EAASF,cAAA,iBAAAI,UAAAC,IAAA,WACLL,EAAAA,UAfrBd,MAqBW,SAAAiB,GACHG,EAAuBH,EAAvBA,KAIZ,SAASG,EAAavB,EAAUoB,GAC5BpB,EAASiB,cAAc,YAAYI,UAAUH,OAAO,WACpDlB,EAASiB,cAAc,kBAAkBO,UAAYJ,EAAMK,QAC3DzB,EAASiB,cAAc,kBAAkBI,UAAcC,IAAA,WA3E3DzB,SAAA6B,iBAAA,mBAEIC,QAAQ9B,SAAS6B,GAEfE,EAAAA,iBAAQ,SAAa,SAAAC,GACrB/B,EAAAA,iBAGME,IAAAA,EAAJ8B,KAGIC,EAAY/B,EAASgC,aAAa,UAAlCD,EAAY/B,EAASgC,aAAa,2BAGlCT,GAAAA,EAAAA,CAGJvB,EAASiB,cAAc,YAAYI,UAAcC,IAAA,WACjDtB,EAASiB,cAAc,kBAAkBI,UAAzCH,OAA0D,WAC1DlB,EAASiB,cAAc,iBAAiBI,UAAxCH,OAAyD,WAEzD,IAAIhB,EAAW,IAAI+B,SAASjC,GAGpB+B,EAC6B,oBAAZG,WACTA,WAAAC,MAAA,WACU,IAA8BD,WAAAE,QAAAL,EAAA,CAAA9B,OAAA,0BAC9BoC,KAAK,SAAAA,GACMnC,EAAAoC,IAAb,qBAAAD,GACAtC,EAAwCG,EAAxCD,EAAAC,KAEV,MAAckB,GACCpB,EAAUoB,EAAvBA,MAIRG,EAAuBvB,EAAA,mDAG3BD,EAAqBC,EAAmBE,EAAnBA,QAzBrBqB,EAAAvB,EAAA","file":"form-handler.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\r\n    \"use strict\";\r\n\r\n    let forms = document.querySelectorAll('.php-email-form');\r\n\r\n    forms.forEach(function (e) {\r\n        e.addEventListener('submit', function (event) {\r\n            event.preventDefault();\r\n\r\n            let thisForm = this;\r\n\r\n            let action = thisForm.getAttribute('action');\r\n            let recaptcha = thisForm.getAttribute('data-recaptcha-site-key');\r\n\r\n            if (!action) {\r\n                displayError(thisForm, 'The form action property is not set!');\r\n                return;\r\n            }\r\n            thisForm.querySelector('.loading').classList.add('d-block');\r\n            thisForm.querySelector('.error-message').classList.remove('d-block');\r\n            thisForm.querySelector('.sent-message').classList.remove('d-block');\r\n\r\n            let formData = new FormData(thisForm);\r\n\r\n            if (recaptcha) {\r\n                if (typeof grecaptcha !== \"undefined\") {\r\n                    grecaptcha.ready(function () {\r\n                        try {\r\n                            grecaptcha.execute(recaptcha, { action: 'php_email_form_submit' })\r\n                                .then(token => {\r\n                                    formData.set('recaptcha-response', token);\r\n                                    php_email_form_submit(thisForm, action, formData);\r\n                                })\r\n                        } catch (error) {\r\n                            displayError(thisForm, error);\r\n                        }\r\n                    });\r\n                } else {\r\n                    displayError(thisForm, 'The reCaptcha javascript API url is not loaded!')\r\n                }\r\n            } else {\r\n                php_email_form_submit(thisForm, action, formData);\r\n            }\r\n        });\r\n    });\r\n\r\n    function php_email_form_submit(thisForm, action, formData) {\r\n        fetch(action, {\r\n            method: 'POST',\r\n            body: formData,\r\n            headers: { 'X-Requested-With': 'XMLHttpRequest' }\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error(`${response.status} ${response.statusText} ${response.url}`);\r\n                }\r\n            })\r\n            .then(data => {\r\n                thisForm.querySelector('.loading').classList.remove('d-block');\r\n                if (data.success) {\r\n                    thisForm.querySelector('.sent-message').classList.add('d-block');\r\n                    thisForm.reset();\r\n                } else {\r\n                    throw new Error(data.error ? data.error : 'Form submission failed and no error message returned from: ' + action);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                displayError(thisForm, error);\r\n            });\r\n    }\r\n\r\n    function displayError(thisForm, error) {\r\n        thisForm.querySelector('.loading').classList.remove('d-block');\r\n        thisForm.querySelector('.error-message').innerHTML = error.message;\r\n        thisForm.querySelector('.error-message').classList.add('d-block');\r\n    }\r\n\r\n});\r\n"]}